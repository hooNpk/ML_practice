-----------------------------------------------------------------------------------------------------

실습자료 10장 readme.txt 개요

> Google colab 설치 및 사용 방법
> Colab 환경에서 MNIST 데이터 예측을 위한 MLP 모형 직접 코딩 (10장_Colab_MNIST_MLP모형코딩.ipynb)

-----------------------------------------------------------------------------------------------------



<Google colab 설치 및 사용 방법>

구글 계정에 로그인한 후 구글 드라이브에 데이터 파일을 업로드한다. (이번 실습에서는 제공된 mnist_train.csv, mnist_test.csv를 업로드한다.)
새 노트 파일을 생성하고 다음의 코드를 실행한다.

from google.colab import drive
drive.mount('/content/gdrive')

코드가 정상적으로 실행되면, 인증 창으로 진입하는 하이퍼링크가 출력된다.
해당 하이퍼링크를 클릭하고 엑세스를 허용하면 개인 인증코드가 생성되고, 해당 인증코드를 colab 출력칸에 붙여넣는다.
다음의 문구가 출력되면 드라이브와의 연결이 모두 완료된 것이다.

Mounted at /content/gdrive

마지막으로 구글 서버에서 코드가 잘 실행되는지 테스트해본다.

추가적으로, Colab 사용 시 다음의 간단한 절차로 CPU가 아닌 GPU를 이용할 수 있다.

런타임->런타임 유형 변경->하드웨어 가속기를 GPU로 변경->저장 






<Colab 환경에서 MNIST 데이터 예측을 위한 MLP 모형 직접 코딩>

케라스 라이브러리에서 MNIST 데이터를 불러올 수 있으나, 이번 실습에서는 연결된 구글 드라이브에 미리 업로드했던 MNIST 데이터를 로드한다. (mnist_train.csv, mnist_test.csv)

이번 실습은 MLP의 전체적인 구조 및 작동 원리를 알아보기 위하여 라이브러리를 사용하지 않고 클래스와 함수를 직접 정의해본다.

먼저 클래스를 선언한 후 input layer, hidden layer, output layer 각각의 노드 갯수를 인자로 입력받을 수 있도록 매개변수를 초기화한다.
여기서 input layer와 output layer는 한 층씩이기 때문에 변경할 것이 없으나, hidden layer의 층은 여러 가지로 시도해볼 수 있다.
(이번 실습에서는 3개의 층을 쌓았다. 4개의 층을 쌓고 싶다면 hidden_layer_4까지 넣으면 된다.)

그 다음 층별 가중치 값들을 레이어의 층 수에 맞춰 랜덤으로 초기화하고, forward 방향으로 예측을 수행하게 될 predict() 함수를 정의한다.
이 때, input layer를 제외한 나머지 층에 대하여 활성함수(Activation function)를 다양하게 적용해본다. 
(이번 실습에서는 3개의 은닉층은 차례로 sigmoid-tanh-sigmoid, 그리고 출력층은 softmax로 정하였다. 참고로, 출력층은 일반적으로 softmax를 사용한다.)

실제로 모델의 학습이 진행될 train() 함수를 정의할 때는 learning rate과 epoch를 매개변수로 설정함으로써 모델 학습 시 다양한 learning rate과 epoch을 실험해볼 수 있다.
해당 함수는 입력 받은 epoch 동안, 각 층의 활성함수에 맞춰 feed-forward propagation, back propagation을 수행하고 입력 받은 learning rate에 따라 가중치가 업데이트되도록 코드를 짜면 된다.
특히, back propagation 식은 각 층에 사용된 활성함수의 미분식을 곱하는 형태로 만들면 된다.

마지막으로, test 데이터에 대한 예측 정확도를 출력하는 함수를 통해 학습이 이루어짐에 따른 정확도 변화를 볼 수 있다.
이번 실습에서는 2000번에 한 번씩 출력하게 하였으나, 이 역시 다양하게 출력 주기를 정할 수 있다.

이렇게 직접 생성한 MLP 모형을 실제로 사용할 때는 앞서 설명한 매개변수에 다양한 인자를 넣어보면서 다양한 MLP 모형의 학습 및 예측이 가능하다.